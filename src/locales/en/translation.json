{
  "greeting": "Hello everyone!",
  "project_intro": "The idea came to me after reconnecting with a former schoolmate — <a href=\"https://www.youtube.com/watch?v=xpGFJZjnEOw\" target=\"_blank\" rel=\"noopener noreferrer\">Nicu</a>. He has a similar project, which you can visit by clicking the link. Returning to our garden, this project — in addition to the manual work of soil preparation, planting seedlings, and placing sensor and pump cables — also has a technical component. This involves programming a microcontroller that coordinates the activity of the pumps, receives data every 3 seconds, and sends it to a personal laptop. Furthermore, the project integrates data analysis and the construction of a complete data pipeline — from the sensors, through the microcontroller and network, to a local server on the laptop where the data is saved and processed. Afterwards, the data is visualized and analyzed in Power BI, offering a clear and dynamic view of the soil condition in real time. All these technical details will be presented toward the end, for those interested.",
  "initial": "Here’s what the soil looked like in the early stages.",
  "soil_condition": "I chose this part of the garden because, from previous care experiences, I noticed it dries out the fastest — possibly due to lack of shade and/or poor soil drainage.",
  "plants": "I planted a total of 18 seedlings: 3 hot peppers, 6 tomato plants, 4 cucumbers, and 5 sweet red peppers. They are not necessarily arranged in rows, as I just wanted to cover the central area of the garden.",
  "components1": "Let’s move on to reviewing the components used for this purpose.",
  "microcontroller": "The ESP32 is a powerful and versatile microcontroller, ideal for IoT projects. It features built-in Wi-Fi and Bluetooth, multiple GPIO pins, and support for sensors and external modules, making it perfect for smart garden automation and monitoring.",
  "sensors": "Capacitive soil moisture sensors measure the water level in the soil without corroding the sensor, providing accurate and stable readings. Three such sensors can be placed in different areas of the garden to uniformly monitor soil moisture and optimize irrigation, saving water and keeping plants healthy.",
  "pumps": "Small 3-6V submersible pumps are ideal for compact garden irrigation or water circulation systems. These electric pumps operate at low voltage and can deliver a flow rate of about 3.7 liters per minute, making them efficient for supplying water to small or medium areas without high energy consumption.",
  "components2": ">Cables, connection boards, and prototyping boards.",
  "connected": "This is what the components look like when connected to the controller.",
  "function": "The components in action.",
  "results": "Here are the first results of the work! :)",
  "tech_data": "Technical Information",
  "codesp": "Here I’ll post the code where you’ll be able to see in detail the technologies used.",
  "general": "The code in the esp.py file reads values from three moisture sensors connected to the ESP32 and automatically controls three pumps based on the measured humidity level. Both raw and percentage humidity values are calculated for each sensor using a calibrated mapping function. Every 5 seconds, the collected data is sent as a JSON payload to a specified server via an HTTP POST request. Wi-Fi connectivity is managed automatically, and if the ESP32 disconnects, it attempts to reconnect. The code displays both the read values and the server responses in the serial monitor for debugging and monitoring.",
  "fastapi": "This code defines a FastAPI server that receives sensor data through the /data endpoint using the POST method. For each incoming request, the server adds a current UTC timestamp to the data, logs the payload to the console, and sends it to a Kafka topic named sensor_data. The server allows requests from any origin (CORS) and runs on port 5050. In this way, the code acts as a gateway between IoT devices and the Kafka infrastructure for data collection and further processing.",
  "kafka_consumer": "This code defines a Kafka consumer that connects to a specified Kafka cluster and listens to the sensor_data topic. For each received message, it decodes the JSON payload, extracts the timestamp and humidity values for each sensor, then displays them in the console. The code also handles automatic reconnection to the Kafka broker in case of disconnection. This enables continuous, efficient, and scalable monitoring of sensor data.",
  "startpage": "Back to Start Page"
}
