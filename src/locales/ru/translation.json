{
  "greeting": "Всем привет!",
  "project_intro": "В этом рассказе я хочу поделиться с вами личным проектом, который объединяет природу и технологии. Идея пришла ко мне после того, как я восстановил связь с одноклассником — <a href=\"https://www.youtube.com/watch?v=xpGFJZjnEOw\" target=\"_blank\" rel=\"noopener noreferrer\">Нику</a>. У него есть похожий проект, с которым вы можете ознакомиться по ссылке. Возвращаясь к нашему саду: этот проект, помимо ручной работы — подготовки почвы, посадки саженцев, укладки кабелей с датчиками и насосами — также включает техническую составляющую. Она предполагает программирование микроконтроллера, который координирует работу насосов, получает данные каждые 3 секунды и отправляет их на личный ноутбук. Кроме того, проект включает анализ данных и построение полного data pipeline — от датчиков, через микроконтроллер и сеть, до локального сервера на ноутбуке, где данные сохраняются и обрабатываются. Затем данные визуализируются и анализируются в Power BI, предоставляя четкое и динамичное представление о состоянии почвы в реальном времени. Все эти технические детали я представлю в конце, для заинтересованных.",
  "initial": "Вот как выглядела почва в самом начале.",
  "soil_condition": "Я выбрал эту часть сада, потому что из предыдущего опыта ухода заметил, что она высыхает быстрее всего — возможно, из-за отсутствия тени и/или плохого дренажа почвы.",
  "plants": "Я посадил всего 18 саженцев: 3 острых перца, 6 кустов помидоров, 4 огурца и 5 сладких перцев капиа. Они не расположены строго по рядам, потому что я просто хотел покрыть центральную часть сада.",
  "components1": "Давайте перейдем к обзору компонентов, использованных для этой цели.",
  "microcontroller": "ESP32 — это мощный и универсальный микроконтроллер, идеально подходящий для IoT-проектов. Он оснащен встроенными Wi-Fi и Bluetooth, множеством GPIO-пинов и поддерживает подключение различных датчиков и внешних модулей, что делает его идеальным для автоматизации и интеллектуального мониторинга сада.",
  "sensors": "Емкостные датчики влажности почвы измеряют уровень воды в почве без коррозии сенсора, обеспечивая точные и стабильные показания. Три таких датчика можно разместить в разных частях сада для равномерного мониторинга влажности и оптимизации полива, экономя воду и сохраняя растения здоровыми.",
  "pumps": "Маленькие погружные насосы на 3–6 В идеально подходят для компактных систем полива или циркуляции воды в саду. Эти электрические насосы работают при низком напряжении и обеспечивают поток около 3,7 литра в минуту, что делает их эффективными для подачи воды на небольшие и средние участки без большого энергопотребления.",
  "components2": ">Кабели, платы для соединений и макетные платы.",
  "connected": "Вот как выглядят компоненты, подключённые к контроллеру.",
  "function": "Компоненты в действии.",
  "results": "А вот и первые результаты нашей работы! :)",
  "tech_data": "Техническая информация",
  "codesp": "Здесь я выложу код, где вы сможете подробно ознакомиться с использованными технологиями.",
  "general": "Код в файле esp.py считывает значения с трёх датчиков влажности, подключённых к ESP32, и автоматически управляет тремя насосами в зависимости от измеренного уровня влажности. Сырые и процентные значения влажности вычисляются для каждого датчика с использованием откалиброванной функции преобразования. Каждые 5 секунд собранные данные отправляются в виде JSON payload на указанный сервер через HTTP POST-запрос. Подключение к Wi-Fi управляется автоматически, и при отключении ESP32 пытается переподключиться. Код отображает как считанные значения, так и ответы сервера в последовательном порту для отладки и мониторинга.",
  "fastapi": "Этот код реализует сервер на FastAPI, который принимает данные с датчиков через endpoint /data методом POST. При каждом получении данных сервер добавляет текущую временную метку UTC, отображает payload в консоли и отправляет данные в Kafka-топик с названием sensor_data. Сервер разрешает запросы из любого источника (CORS) и работает на порту 5050. Таким образом, код служит шлюзом между IoT-устройствами и инфраструктурой Kafka для сбора и последующей обработки данных.",
  "kafka_consumer": "Этот код реализует Kafka, который подключается к указанному кластеру Kafka и прослушивает топик sensor_data. При каждом получении сообщения он декодирует JSON payload, извлекает временную метку и значения влажности для каждого датчика, а затем отображает их в консоли. Также код обеспечивает автоматическое переподключение к брокеру Kafka в случае разрыва соединения. Это позволяет эффективно и масштабируемо отслеживать данные с датчиков в реальном времени.",
  "startpage": "Назад на главную страницу"
}
